openapi: 3.0.1

info:
  title: Authors Haven API Documentation
  description: Create a community of like minded authors to foster inspiration and innovation by leveraging the modern web.
  version: 1.0.0
  contact:
    email: teamrambo50@gmail.com

license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /
    desription: Localhost server
  - url: https://authors-haven-development.herokuapp.com/
    desription: Heroku development server

paths:
  /:
    summary: Represent root of the application
    description: Represent root of the application.
    get:
      summary: Returns a welcome message.
      description: Returns a welcome message.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Welcome to Authors Haven
  /api/v1/users/create:
    post:
      summary: Route for signing new users up
      description: Allow new users to register to use the application on providing valid details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/UserSignUp'
        description: user to be created
      responses:
        201:
          description: new user created successfully
        409:
          description: Conflict. Email or username exists
        500:
          description: Internal server error
  /api/v1/sessions/create:
    post:
      summary: Login Route
      description: Allow existing users to login to use the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                userLogin:
                  type: string
                  minLength: 6
                  example: JhayXXX
                password:
                  type: string
                  minLength: 8
                  example: incorrect
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/loginResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        403:
          description: Incorrect username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
  /api/v1/auth/facebook:
    get:
      summary: Route for signing new using facebook
      description: Allow new user to Login using facebook
      responses:
        302:
          description: redirect url
  /api/v1/auth/facebook/callback:
    get:
      summary: redirect url for facebook login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"

  /api/v1/auth/google:
    get:
      summary: Route for signing new using google
      description: Allow new user to Login using google
      responses:
        302:
          description: redirect url
  /api/v1/auth/google/callback:
    get:
      summary: redirect url for google login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"

  /api/v1/auth/twitter:
    get:
      summary: Route for signing new using twitter
      description: Allow new user to Login using twitter
      responses:
        302:
          description: redirect url
  /api/v1/auth/twitter/callback:
    get:
      summary: redirect url for twitter login/signup
      description: Allow existing users to signup or login
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/SocialUserSignUp"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SocialserverResponse"
        "403":
          description: Incorrect username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
      security:
        - BearerAuth: []
  /api/v1/profiles/{username}/follow:
    post:
      summary: Follow user route
      description: Follow user route
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username to follow
          schema:
            type : string
      responses:
        "200":
          description: follow successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
    delete:
      summary: Unfollow user route
      description: Unfollow user route
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username to unfollow
          schema:
            type : string
      responses:
        "200":
          description: unfollow successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unfollowResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"  
                
  /api/v1/user/followings:
    get:
      summary: User followings route
      description: Get all user followed by a particular user 
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: request successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followingResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
                
  /api/v1/user/followers:
    get:
      summary: User followers route
      description: Get all user following a particular user
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: request successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/followerResponse"
        "401":
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "404":
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "409":
          description: user cannot perform this action
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
  /api/v1/users/verifyEmail/{token}:
    get:
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The token sent to the user's email for verification
      summary: Route for verifying emails
      description: Allow registered users to verify their emails
      responses:
        200:
          description: Success. Email verification was successful
        500:
          description: Internal server errorcomponents     

  /api/v1/users/changePassword:
    patch:
      summary: Logged In user can change their password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/changePasswordDetails'
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: user password changed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/changePasswordResponse"
        "422":
          description: password does not match validaton errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/changePasswordErrorResponse"
  /api/v1/users/resetpassword:
    post:
      summary: Request reset password link route
      description: Allow existing users to request for password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email  
              properties:
                email:
                  type: string
                  example: JhayXXX@gmail.com
      responses:
        200:
          description: password reset link sent
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/passwordResetLinkResponse"
        404:
          description: email address not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"

  /api/v1/users/resetpassword/{token}:
    patch:
      summary: Reset password route
      description: Allow existing users to reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              - confirmPassword  
              properties:
                password:
                  type: string
                  example: JhayXXXgmail.com
                confirmPassword:
                  type: string
                  example: JhayXXXgmail.com
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The token sent to the user to reset password
      responses:
        200:
          description: password reset successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/passwordResetResponse"
        401:
          description: reset link has expired, invalid or been used
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: reset link has expired, invalid or been used
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"  
                
  /api/v1/tags:
    get:
      summary: Get all tags
      description: Get all tags
      responses:
        200:
          description: request successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/getTagsResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"          
           
  /api/v1/profiles/{id}:
    patch:
      summary: Route for editing existing user 
      description: Allow existing users to edit their information
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: user id
          schema:
            type : string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/EditUser'
        description: edit user profile
      responses:
        200:
          description: user edited successfully
        409:
          description: Conflict. Email or username exists
        500:
          description: Internal server error  
  /api/v1/profiles/{username}:
    get:
      parameters:
        - name: username
          in: path
          required: true
          description: users username
          schema:
            type : string
      summary: Route for getting other users profile
      description: Allow user to view other user details
      responses:
        200:
          description: user fetched successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/viewResponse"
        404:
          description: user does not exist
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Internal server error  
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"                    
  /api/v1/articles/create:
    post:
      summary: A user can create an article
      description: create Articles
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                articleBody:
                  type: string
                description:
                  type: string
                status:
                  type: string
                image:
                  type: string
                  format: binary
                tags:
                  type: string
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: user article created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/createArticleResponse"
        "422":
          description: validaton errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/changeArticleErrorResponse" 

  /api/v1/articles/{slug}/comments:
    post:
      summary: Authenticated user can make comment
      description: Route allows users to add comments tom article
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - comment
              properties:
                comment:
                  type: text
                  example: This is a comment. 
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Article Slug
      responses:
        201:
          description: Comment Added
        404:
          description: Article not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        422:
          description: comment validation error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"

        500:
          description: Internal server error  
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
    get:
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Article Slug
      summary: Route for getting comments of an article
      description: Allow fetching of all comments 
      responses:
        200:
          description: user fetched all comments on article successfully
        404:
          description: article not found/no comments on article
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Internal server error  
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"   

  /api/v1/categories/create:
    post:
      summary: Logged In admin user can create a category
      description: Create category
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCategory'
      responses:
        200:
          description: category successfully created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/createCategoryResponse"
        401:
          description: token expired
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        404:
          description: user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        409:
          description: category already exists
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse"
  
  /api/v1/articles/{slug}/comments/{commentId}:
    patch:
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Article Slug
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: Comment Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - comment
              properties:
                comment:
                  type: text
                  example: This is a comment. 
      summary: Route to update comment of an article
      description: Allows owner of a comment to update 
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: comment updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/updateCommentResponse"
        404:
          description: article not found/no comments on article
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"
        500:
          description: Internal server error  
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/serverResponse" 

    /api/v1/articles/{slug}/comments/{commentId}:  
    delete:
        summary: Route to delete comment
        description: Allows owner of a comment to delete comment 
        security:
          - ApiKeyAuth: []
        parameters:
          - in: path
            name: slug
            required: true
            schema:
              type: string
            description: Article Slug
          - in: path
            name: commentId
            required: true
            schema:
              type: string
            description: Comment Id
        responses:
          200:
            description: comment updated successfully
            content:
            application/json:
              schema:
                "$ref": "#/components/schemas/updateCommentResponse"
          401:
          description: authentication error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/errorResponse"

          404:
            description: article not found/no comments on article
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/errorResponse"
          500:
            description: Internal server error  
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/serverResponse" 



                     
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  UserSignUp:
    type: object
    required:
    - firstName
    - lastName
    - userName
    - email
    - password
    properties:
      firstName:
        type: string
        example: Rihanna
      lastName:
        type: string
        example: Adeyemo
      userName:
        type: string
        example: RiriAde
      email:
        type: string
        example: riri.adeyemo@andela.com
      password:
        type: string
        example: incorrect
      confirmPassword:
        type: string
        example: incorrect
  SocialUserSignUp:
    type: object
    required:
    - firstName
    - lastName
    - userName
    - email
    - password
    - token
    properties:
      id:
        type: string
        example: 1
      firstName:
        type: string
        example: Adekay
      lastName:
        type: string
        example: Ade
      userName:
        type: string
        example: korey
      email:
        type: string
        example: riri.adeyemo@andela.com
      password:
        type: string
        example: incorrect
      confirmPassword:
        type: string
        example: incorrect
      token:
        type: string
        example: bhddmdmddddddddddddmddnddb
  changePasswordDetails:
    type: object
    required:
    - password
    - confirmPassword
    properties:
      password:
        type: string
        example: mypassword
      confirmPassword:
        type: string
        example: mypassword
  EditUser:
    type: object
    required:
    - firstName
    - lastName
    - userName
    - email
    - avatarUrl
    properties:
      firstName:
        type: string
        example: Escanor
      lastName:
        type: string
        example: jhayx
      userName:
        type: string
        example: Pride
      email:
        type: string
        example: riri.escanor@andela.com
      avatarUrl:
        type: string
        example: 'https://res.cloudinary.com/teamrambo50/image/upload/v1565160704/avatar-1577909_1280_xsoxql.png'

  schemas:
    loginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id: 
              type: integer
              example: 1
            userName:
              type: string
              example: JhayXXX
            firstName:
              type: string
              example: ade
            lastName:
              type: string
              example: chukwu
            email:
              type: string
              example: abiola@andela.com
        token:
          type: string
    errorResponse:
      type: object
      properties:
        message:
          type: string
    serverResponse:
      type: object
      properties:
        error:
          type: string
    SocialserverResponse:
      type: object
      properties:
        message:
          type: string
          example: Auth failed
    signoutResponse:
      type: object
      properties:
        message:
          type: string
    followResponse:
      type: object
      properties:
        following:
          type: object
          properties:
            message:
              type: string
              example: followed successfully
            data:
              type: object
              properties:
                id: 
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 1
                followerId:
                  type: integer
                  example: 2
    unfollowResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id: 
              type: integer
            message:
              type: string
              example: you successfully unfollowed user2
    followingResponse:
      type: object
      properties:
        followings:
          type: array
          items:
            type: object
            properties:
              id: 
                type: integer
                example: 1
              userId:
                type: integer
                example: 1
              followerId:
                type: integer
                example: 2
              following:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 1
                  userName:
                    type: string
                    example: JhayXXX
                  firstName:
                    type: string
                    example: ade
                  lastName:
                    type: string
                    example: chukwu
                  email:
                    type: string
                    example: abiola@andela.com
    followerResponse:
      type: object
      properties:
        followers:
          type: array
          items:
            type: object
            properties:
              id: 
                type: integer
                example: 1
              userId:
                type: integer
                example: 1
              followerId:
                type: integer
                example: 2
              follower:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 1
                  userName:
                    type: string
                    example: JhayXXX
                  firstName:
                    type: string
                    example: ade
                  lastName:
                    type: string
                    example: chukwu
                  email:
                    type: string
                    example: abiola@andela.com
    changePasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: password changed Successfully
    changePasswordErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            confirmpassword:
              type: string
              example: confirm password must match password
    passwordResetLinkResponse:
      type: object
      properties:
        message:
          type: string
    passwordResetResponse:
      type: object
      properties:
        message:
          type: string
    getTagsResponse:
      type: object
      properties:
        tags:
          type: array
          items: 
            type: string
            example: newCategoryy
    viewResponse:
      type: object
      properties:
        id: 
          type: integer
          example: 1
        firstName:
          type: string
          example: escanor
        lastName:
          type: string
          example: pride
        userName:
          type: string
          example: prider
    createArticleResponse:
      type: object
      properties:
        likesCount:
          type: integer
          example: 1
        dislikesCount:
          type: integer
          example: 2
        isArchived:
          type: boolean
          example: true
        id:
          type: integer
          example: 1
        articleBody:
          type: string
          example: loremhipsondossantos
        titile:
          type: string
          example: loremhipsondossantos
        description:
          type: string
          example: loremhipsondossantos
        image:
          type: string
          example: 'https://res.cloudinary.com/teamrambo50/image/upload/v1565160704/avatar-1577909_1280_xsoxql.png'
        authorId: 
          type: integer
          example: 3
        publishedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        updatedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        slug:
          type: string
          format: date-time
          example: title-1
    changeArticleErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            title:
              type: string
              example: title should not be less than 3 characters
            status:
              type: string
              example: status is required
    createCategory:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: newCategoryy
    createCategoryResponse:
      type: object
      properties:
        message:
          type: string
          example: newCategoryy category successfully created
        data:
          type: object
          properties:
            id: 
              type: integer
              example: 3
            name:
              type: string
              example: newCategoryy
    updateCommentResponse:
      type: object
      properties:
        message:
          type: string
